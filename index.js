/**
* Authors: Hayden Tran (102882815), Rhyanna Arisya Zaharom (103698709)
* Target: index.html
* Created: 29th April 2023
**/

function init() {

  // Define the SVG width and height
  var width = 800;
  var height = 600;
  var bar_padding = 5;

  //Visualization 1 START

  // // Load the GeoJSON file containing the map data of Somalia
  // d3.json("json/somalia_with_regions.json").then(function (data) {
  //   // Create a projection of the GeoJSON data onto the SVG element
  //   var projection = d3.geoMercator()
  //     .center([48.5, 5.5])
  //     .scale(2000)
  //     .translate([width / 2, height / 2]);
  //
  //   // Create a path for the projected GeoJSON data
  //   var path = d3.geoPath().projection(projection);
  //
  //   // Append a path element to the SVG element and set its "d" attribute to the path generated by the D3.geoPath() method
  //   svg1.append("path")
  //     .datum(data)
  //     .attr("d", path)
  //     .attr("fill", "#FFFFFF")
  //     .attr("stroke", "#373E40")
  //     .attr("stroke-width", 1);
  // });

  // Create a projection of the GeoJSON data onto the SVG element
  var projection = d3.geoMercator()
    .center([48.5, 5.5])
    .scale(2000)
    .translate([width / 2, height / 2]);

  // Create a path for the projected GeoJSON data
  var path = d3.geoPath().projection(projection);

  // Set colour range
  const color = d3.scaleOrdinal()
    .domain(['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5'])
    .range(["#a7e8bd", "#ffba08", "#f48c06", "#d00000", "#9d0208"])

  // Create the SVG element and set its dimensions
  var svg1 = d3.select("#chart1")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

  // load in file
  d3.csv("data/acute_food_insecurity_by_region.csv", function (data) {

    // color.domain([
    //   d3.min(data, function (d) { return d.region; }),
    //   d3.max(data, function (d) { return d.phase_5; })
    // ]);

    // read in the JSON file and bind it to the path
    d3.json("json/somalia_with_regions.json", function (json) {
      // merge the data of CSV and JSON
      // loop through once for each data value
      for (var i = 0; i < data.length; i++) {

        var dataRegion = data[i].region;

        var phase_5 = data[i].phase_5;

        // find the corresponding state inside GeoJSON
        for (var j = 0; j < json.features.length; j++) {
          var jsonRegion = json.features[j].properties.name;
          if (dataRegion == jsonRegion) {
            // copy the data value into JSON
            json.features[j].properties.phase_5 = phase_5;
            // stop looking through the JSON
            break;
          }
        }
      };

      svg1.selectAll("path")
        .data(json.features)
        .enter()
        .append("path")
        .attr("d", path)
        .attr("stroke", "#373E40")
        .attr("stroke-width", 1)
        .style("fill", function (d) {
          var value = d.properties.phase_5;  // get data value
          if (value) {                          // if value exists
            return color(value);              // color in the path
          } else {                              // if value is undefined
            return "#ccc";                    // light grey area
          }

        });

    });

  });


  //Visualization 1 END

  //Visualization 2 START
  var svg2 = d3.select("#chart2")
    .append("svg")
    .attr("width", width)
    .attr("height", height);
  //Visualization 2 END


  //Visualization 3 START

  var svg3 = d3.select("#chart3")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

  d3.csv("data/consumer_price_food_indices_som.csv").then(function (data3) {
    var bar_number = data3.length
    var quarterlyChange = data3.map(function (d) {
      return Number(d.quarterlyChange);
    });

    var annualChange = data3.map(function (d) {
      return Number(d.annualChange);
    });

    //add scale for visualization
    var xScale = d3.scaleBand()
      .range([0, width])
      .domain(data3.map(function (d) { return d.date; }))
      .padding(bar_padding);

    var yScale = d3.scaleLinear()
      .range([height, height * 2 / 3, 0])
      .domain([d3.min(quarterlyChange), 0, d3.max(quarterlyChange)]);
    //

    //add axis
    var xAxis = d3.axisBottom()
      .scale(xScale);

    var yAxis = d3.axisLeft()
      .scale(yScale)
      .ticks(10)
      .tickSizeInner(-width);

    svg3.append("g")
      .attr("transform", "translate(30," + height * (2 / 3) + ")")
      .call(xAxis);

    svg3.append("g")
      .attr("class", "grid")
      .attr("transform", "translate(30, 0)")
      .call(yAxis);

    svg3.selectAll(".grid line") //add grid line
      .style("stroke-width", "0.5px")
      .style("stroke", "#cccccc");
    //

    //add bars
    svg3.selectAll("rect")
      .data(quarterlyChange)
      .enter()
      .append("rect")
      .attr("id", "bar-chart")
      .attr("x", function (d, i) {
        return i * (width * (11 / 12) / bar_number) + 50;
      })
      .attr("y", function (d) {
        if (d >= 0) {
          return yScale(d);
        } else {
          return height * (2 / 3);
        }
      })
      .attr('width', width * (11 / 13) / bar_number - bar_padding)
      .attr('height', function (d) {
        return Math.abs(height * 2 / 3 - yScale(d));
      })
      .attr("fill", "darkred")
      .on("mouseover", function (event, d) {
        //hover effect to blur out line chart
        d3.selectAll("path")
          .style("opacity", 0.2);
        d3.selectAll("circle")
          .style("opacity", 0.2);
        d3.select("rect")
          .style("opacity", 1);
        d3.select(this)
          .attr("fill", "#ff6666")
        //

        var xPosition = parseFloat(d3.select(this).attr('x'))
        var yPosition = parseFloat(d3.select(this).attr('y'))

        svg3.append('rect') //background for text when hovering
          .attr('id', 'tooltip-background')
          .attr('x', xPosition + 5)
          .attr('y', yPosition + 20)
          .attr('width', 50)
          .attr('height', 20)
          .attr('fill', 'lightblue')
          .attr('opacity', 0.7)
          .attr('rx', 5)
          .attr('ry', 5);

        svg3.append('text')   //display text when hovering
          .style("font", "14px sans-serif")
          .attr('id', 'tooltip')
          .attr('x', xPosition + 10)
          .attr('y', yPosition + 35)
          .text(d + "%")
          .attr('fill', 'black');

      })
      .on("mouseout", function () {
        d3.selectAll("path")
          .style("opacity", 1);
        d3.selectAll("rect")
          .style("opacity", 1);
        d3.selectAll("circle")
          .style("opacity", 1);
        d3.select(this)
          .attr("fill", "darkred");

        d3.select('#tooltip').remove() //remove tool tip
        d3.select('#tooltip-background').remove(); // remove background

      })
    //

    //scatter plot
    svg3.selectAll("circle")
      .data(annualChange)
      .enter()
      .append("circle")
      .attr("cx", function (d, i) {
        return i * (width * (11 / 12) / bar_number) + 64;
      })
      .attr("cy", function (d) {
        return yScale(d);
      })
      .attr("r", 8)
      .attr("fill", "darkgreen")
      .on('mouseover', function (event, d) {  //creat hover effect for scatter plot
        var xPosition = parseFloat(d3.select(this).attr('cx'))
        var yPosition = parseFloat(d3.select(this).attr('cy'))

        svg3.append('rect') //background for text when hovering
          .attr('id', 'tooltip-background')
          .attr('x', xPosition + 5)
          .attr('y', yPosition - 20)
          .attr('width', 50)
          .attr('height', 20)
          .attr('fill', 'lightblue')
          .attr('opacity', 0.7)
          .attr('rx', 5)
          .attr('ry', 5);

        svg3.append('text')   //display text when hovering
          .style("font", "14px sans-serif")
          .attr('id', 'tooltip')
          .attr('x', xPosition + 10)
          .attr('y', yPosition - 5)
          .text(d + "%")
          .attr('fill', 'black');

        d3.selectAll("#bar-chart")  //blur out the bar chart when hovering
          .style("opacity", 0.2);
        d3.select("path")
          .style("filter", "none");
      })
      .on('mouseout', function () {
        d3.select('#tooltip').remove() //remove tool tip
        d3.select('#tooltip-background').remove(); // remove background

        d3.selectAll("rect")  //make the bar chart normal when not hovering the scatter plot
          .style("opacity", 1);
      })


    var lineGenerator = d3.line()
      .x(function (d, i) { return i * (width * (11 / 12) / bar_number) + 64; })
      .y(function (d) { return yScale(d.annualChange); })
      .curve(d3.curveLinear);

    // Add the line to the chart
    svg3.append("path")
      .datum(data3)
      .attr("fill", "none")
      .attr("stroke", "#2b8cbe")
      .attr("stroke-width", 5)
      .attr("d", lineGenerator)
      .on("mouseover", function () { // hover efect to blur out bar chart
        d3.selectAll("rect")
          .style("opacity", 0.2);
        d3.select("path")
          .style("filter", "none");
      })
      .on("mouseout", function () {
        d3.selectAll("rect")
          .style("opacity", 1);
      });

  })
  //


  //Visualization 3 END
}

window.onload = init;
